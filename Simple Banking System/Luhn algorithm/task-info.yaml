type: edu
files:
- name: banking/banking.py
  visible: true
  text: |
    import random


    def test_luhn(card_number):
        card_number = [int(num) for num in card_number]
        for i in range(len(card_number)):
            if i % 2 == 0:
                card_number[i] = card_number[i] * 2
        for i in range(len(card_number)):
            if card_number[i] > 9:
                card_number[i] -= 9
        if sum(card_number) % 10 == 0:
            return True
        else:
            return False

    def create_card_number():
        random_numbers = [str(random.randint(1, 9)) for _ in range(9)]
        card_number = [int(num) for num in card_number]
        for i in range(len(card_number)):
            if i % 2 == 0:
                card_number[i] = card_number[i] * 2
        for i in range(len(card_number)):
            if card_number[i] > 9:
                card_number[i] -= 9
        for i in range(10):
            if (sum(card_number) + i) % 10 == 0:
                card_number.append(i)
                break
        card_number.extend(random_numbers)
        bin = list('400000')
        card_number = ''.join(str(num) for num in card_number)
        return card_number


    def create_account(my_dict):
        random_numbers = [str(random.randint(1, 9)) for i in range(9)]
        start_card = '400000' + ''.join(random_numbers)
        for checksum in range(10):
            if test_luhn(start_card + str(checksum)):
                card_number = start_card + str(checksum)
                break
        pin = ''.join([str(random.randint(0, 9)) for i in range(4)])
        my_dict[card_number] = {"pin": pin, "balance": 0}
        print("Your card has been created")
        print("Your card number:")
        print(card_number)
        print("Your card PIN:")
        print(pin)
        print("")


    def login(card_number, pin, my_dict):
        if test_luhn(card_number):
            if card_number in my_dict:
                if my_dict[card_number]["pin"] == pin:
                    print("You have successfully logged in!")
                    print("")
                    return True
                else:
                    print("Wrong card number or PIN!")
                    print("")
                    client_service(my_dict)
            else:
                print("Wrong card number or PIN!")
                print("")
                client_service(my_dict)
        else:
            print("Wrong card number or PIN!")
            print("")
            client_service(my_dict)


    def check_account(card_number, pin, my_dict):
        print("1. Balance")
        print("2. Log out")
        print("0. Exit")
        choice = int(input())
        if choice == 1:
            print("Balance:", my_dict[card_number]["balance"])
            check_account(card_number, pin, my_dict)
        if choice == 2:
            client_service(my_dict)
        if choice == 0:
            print("Bye!")
            # exit()


    def client_service(my_cards):
        print("1. Create an account", "2. Log into account", "0. Exit", sep="\n")
        option = int(input())
        print()
        if option == 1:
            create_account(my_cards)
            client_service(my_cards)
        if option == 2:
            card_number = input("Enter your card number:\n")
            pin = input("Enter your PIN:\n")
            if login(card_number, pin, my_cards):
                check_account(card_number, pin, my_cards)
        if option == 0:
            print("Bye!")
            # exit()


    my_cards = {}
    client_service(my_cards)
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.exceptions import WrongAnswer
    from hstest.test_case import CheckResult
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    import random
    import re

    card_number = ''
    pin = ''
    are_all_inputs_read = False


    def get_credentials(output: str):
        number = re.findall(r'^400000\d{10}$', output, re.MULTILINE)
        if not number:
            raise WrongAnswer('You are printing the card number incorrectly. '
                                       'The card number should look like in the example: 400000DDDDDDDDDD,'
                                       ' where D is a digit.\nMake sure the card number is 16-digit length and '
                                       'you don\'t print any extra spaces at the end of the line!')

        PIN = re.findall(r'^\d{4}$', output, re.MULTILINE)
        if not PIN:
            raise WrongAnswer('You are printing the card PIN incorrectly. '
                                       'The PIN should look like in the example: DDDD, where D is a digit.\n'
                                       'Make sure the PIN is 4-digit length and you don\'t print any extra spaces at the'
                                       ' end of the line!')

        return number[0], PIN[0]


    def test_card_generation(output: str, value_to_return):
        global card_number, pin, are_all_inputs_read
        are_all_inputs_read = False
        credentials = get_credentials(output)
        card_number = credentials[0]
        pin = credentials[1]
        return value_to_return


    def test_difference_between_generations(output: str, value_to_return):
        global card_number, pin, are_all_inputs_read
        credentials = get_credentials(output)
        another_card_number = credentials[0]

        if another_card_number == card_number:
            return CheckResult.wrong('Your program generates two identical card numbers!')
        are_all_inputs_read = True

        return value_to_return


    def test_sign_in_with_correct_credentials(output: str, value_to_return):
        global card_number, pin
        return '{}\n{}'.format(card_number, pin)


    def test_output_after_correct_sign_in(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'successfully' not in output.lower():
            return CheckResult.wrong(
                'There is no \'successfully\' in your output after signing in with correct credentials')
        return value_to_return


    def test_sign_in_with_wrong_pin(output: str, value_to_return):
        global card_number, pin
        wrong_pin = pin
        while pin == wrong_pin:
            wrong_pin = ''.join(list(map(str, random.sample(range(1, 10), 4))))
        return '{}\n{}\n'.format(card_number, wrong_pin)


    def test_output_after_wrong_pin(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'wrong' not in output.lower():
            return CheckResult.wrong(
                'There is no \'wrong\' in your output after signing in with incorrect credentials')
        return value_to_return


    def test_sign_in_with_wrong_card_number(output: str, value_to_return):
        global card_number, pin
        wrong_card_number = card_number
        while wrong_card_number == card_number:
            temp = [4, 0, 0, 0, 0, 0]
            for _ in range(10):
                temp.append(random.randint(1, 9))
            wrong_card_number = ''.join(list(map(str, temp)))
        return '{}\n{}\n'.format(wrong_card_number, pin)


    def test_output_after_wrong_card_number(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'wrong' not in output.lower():
            return CheckResult.wrong(
                'There is no \'wrong\' in your output after signing in with incorrect credentials')
        return value_to_return


    def is_passed_luhn_algorithm(number):
        luhn = [int(char) for char in str(number)]
        for i, num in enumerate(luhn):
            if (i + 1) % 2 == 0:
                continue
            temp = num * 2
            luhn[i] = temp if temp < 10 else temp - 9
        return sum(luhn) % 10 == 0


    def test_luhn_algorithm(output: str, correct_num_of_cards):
        global are_all_inputs_read

        numbers = re.findall(r'400000\d{10,}', output, re.MULTILINE)

        for number in numbers:
            if len(number) != 16:
                return CheckResult.wrong(f'Wrong card number \'{number}\'. The card number should be 16-digit length.')
            if not is_passed_luhn_algorithm(number):
                return CheckResult.wrong('The card number \'{}\' doesn\'t pass luhn algorithm!'.format(number))

        if len(numbers) != correct_num_of_cards:
            return CheckResult.wrong(
                f'After creating {correct_num_of_cards} cards, found {len(numbers)} cards with correct format\n'
                f'The card number should be 16-digit length and should start with 400000.')

        are_all_inputs_read = True
        return '0'


    class BankingSystem(StageTest):

        def generate(self):
            return [
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '1'),
                        lambda output: test_difference_between_generations(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_correct_credentials(output, None),
                        lambda output: test_output_after_correct_sign_in(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_wrong_pin(output, None),
                        lambda output: test_output_after_wrong_pin(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_wrong_card_number(output, None),
                        lambda output: test_output_after_wrong_card_number(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1',
                        lambda output: test_luhn_algorithm(output, 11),
                    ])
            ]

        def check(self, reply: str, attach) -> CheckResult:
            if are_all_inputs_read:
                return CheckResult.correct()
            else:
                return CheckResult.wrong('You didn\'t read all inputs!')


    if __name__ == '__main__':
        BankingSystem('banking.banking').run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/9828#comment
status: Solved
record: 2
